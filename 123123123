local screenGui = Instance.new("ScreenGui")
screenGui.Name = "AutoJoinerGui"
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 200, 0, 100)
frame.Position = UDim2.new(0.5, -100, 0.5, -50)
frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
frame.BackgroundTransparency = 0.5
frame.Parent = screenGui

local uiStroke = Instance.new("UIStroke")
uiStroke.Color = Color3.fromRGB(255, 255, 255)
uiStroke.Thickness = 4
uiStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
uiStroke.Parent = frame

local label = Instance.new("TextLabel")
label.Size = UDim2.new(1, 0, 1, 0)
label.BackgroundTransparency = 1
label.Text = "Auto Joiner\nby sudo_kai"
label.TextColor3 = Color3.fromRGB(255, 255, 255)
label.TextScaled = true
label.Font = Enum.Font.SourceSans
label.TextStrokeTransparency = 0.8
label.Parent = frame

local function animateRGBBorder()
    while true do
        for i = 0, 255, 5 do
            uiStroke.Color = Color3.fromRGB(i, 0, 255 - i)
            task.wait(0.05)
        end
        for i = 255, 0, -5 do
            uiStroke.Color = Color3.fromRGB(i, 255 - i, 0)
            task.wait(0.05)
        end
    end
end
spawn(animateRGBBorder)

-- Dragging functionality
local dragging, dragInput, startPos, framePos = false
frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        startPos = input.Position
        framePos = frame.Position
    end
end)

frame.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        local delta = input.Position - startPos
        frame.Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
    end
end)

frame.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = false
    end
end)

-- Prevent UI interference
local playerGui = game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui")
if playerGui then
    local dialogApp = playerGui:FindFirstChild("DialogApp")
    if dialogApp then
        local dialog = dialogApp:FindFirstChild("Dialog")
        if dialog then
            dialog.Visible = false
            dialog.Position = UDim2.new(1000, 0, 1000, 0)
        end
    end
    local hintApp = playerGui:FindFirstChild("HintApp")
    if hintApp then
        hintApp:Destroy()
    end
end

-- Anti-AFK
local virtualUser = game:GetService('VirtualUser')
game:GetService('Players').LocalPlayer.Idled:Connect(function()
    virtualUser:CaptureController()
    virtualUser:ClickButton2(Vector2.new())
end)

-- Discord webhook handling
local Token = Token or "" -- Ensure these are properly set
local ChannelId = ChannelId or ""

local HttpService = game:GetService("HttpService")
local requestFunction = (syn and syn.request) or (http and http.request) or (http_request) or (request)
assert(requestFunction, "No valid HTTP request function found!")

local saveFilePath = "cache.txt"
local function saveLastMessageId(messageId)
    pcall(function()
        writefile(saveFilePath, messageId)
    end)
end

local function loadLastMessageId()
    if isfile(saveFilePath) then
        local success, messageId = pcall(readfile, saveFilePath)
        return success and messageId or nil
    end
    return nil
end

local lastProcessedMessageId = loadLastMessageId()

while true do
    local success, response = pcall(function()
        return requestFunction({
            Url = "https://discord.com/api/v9/channels/" .. ChannelId .. "/messages?limit=1",
            Method = "GET",
            Headers = {
                ["Authorization"] = Token,
                ["Content-Type"] = "application/json",
            },
        })
    end)

    if success and response.StatusCode == 200 then
        local messages = HttpService:JSONDecode(response.Body)
        if #messages > 0 then
            local message = messages[1]
            if message.id ~= lastProcessedMessageId then
                local teleportPattern = "game:GetService%(\"TeleportService\"%):TeleportToPlaceInstance%(%d+,%s*\"[^\"]+\",%s*game%.Players%.LocalPlayer%)"

                -- Check message content for teleport string
                if message.content and string.match(message.content, teleportPattern) then
                    pcall(function()
                        local placeId, jobId = string.match(message.content, "TeleportToPlaceInstance%((%d+),%s*\"([^\"]+)\"")
                        if placeId and jobId then
                            game:GetService("TeleportService"):TeleportToPlaceInstance(placeId, jobId, game.Players.LocalPlayer)
                        end
                    end)
                    saveLastMessageId(message.id)

                else
                    local embeds = message.embeds
                    if embeds and #embeds > 0 then
                        for _, embed in ipairs(embeds) do
                            if embed.description and string.match(embed.description, teleportPattern) then
                                pcall(function()
                                    local placeId, jobId = string.match(embed.description, "TeleportToPlaceInstance%((%d+),%s*\"([^\"]+)\"")
                                    if placeId and jobId then
                                        game:GetService("TeleportService"):TeleportToPlaceInstance(placeId, jobId, game.Players.LocalPlayer)
                                    end
                                end)
                                saveLastMessageId(message.id)
                                break
                            end

                            if embed.fields then
                                for _, field in ipairs(embed.fields) do
                                    if field.value and string.match(field.value, teleportPattern) then
                                        pcall(function()
                                            local placeId, jobId = string.match(field.value, "TeleportToPlaceInstance%((%d+),%s*\"([^\"]+)\"")
                                            if placeId and jobId then
                                                game:GetService("TeleportService"):TeleportToPlaceInstance(placeId, jobId, game.Players.LocalPlayer)
                                            end
                                        end)
                                        saveLastMessageId(message.id)
                                        break
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    task.wait(2) -- Prevent excessive requests
end
